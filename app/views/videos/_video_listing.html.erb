<% hold_queue ||= false %>
<% if @videos.present? %>
  <div class='videos masonry'>
    <% @videos.each do |video| %>
      <div class='masonry-brick video'>
        <video poster='<%= video.thumbnail_url %>' preload='none' controls>
          <source src='<%= video.url %>'>
        </video>
        <div class='description'><%= video.description %></div>
        <% if video.creator_url %>
          <div class='creator'><%= link_to 'Creator', video.creator_url %></div>
        <% end %>
        <% if video.info_url %>
          <div class='info'><%= link_to 'Info', video.info_url %></div>
        <% end %>
        <form class='video-approval-form form form-inline' data-video-id='<%= video.id %>'>
          <%= hidden_field_tag 'video[action]', nil %>
          <%= hidden_field_tag 'video[reject_reason_id]', nil %>
          <% video.ratings.each do |rating| %>
            <% if rating[:type] == 'radio' %>
              <div class='rating radio-rating <%= cycle('rating-odd', 'rating-even') %>'>
                <label><%= rating[:title] %>:</label>
                <% rating[:values].each_with_index do |value, index| %>
                  <label for='video_<%= video.id %>_ratings_<%= rating[:id] %>_<%= index %>' class='radio'>
                    <%= radio_button_tag "video[ratings[#{rating[:id]}]]", index, false, :id => "video_#{video.id}_ratings_#{rating[:id]}_#{index}" %>
                    <%= value %>
                  </label>
                <% end %>
              </div>
            <% end %>
          <% end %>
          <div class='form-group'>
            <%= text_field_tag 'video[tags]', nil, :placeholder => 'Tags' %>
          </div>
          <div class='form-group'>
            <button type='submit' class='btn pull-left'>Approve</button>
            <% if ! hold_queue %>
              <button type='button' class='btn pull-right hold-button'>Hold</button>
            <% end %>
          </div>
          <div class='clearfix'></div>
          <div class='reject-reasons'>
            <div class='form-group-title'>Reject</div>
            <div>
              <%= text_area_tag 'video[message_to_user]', nil, :placeholder => 'Custom Message To User' %>
            </div>
            <% video.reject_reasons.each do |reject_reason| %>
              <div class='reject-button-container'>
                <%= button_tag reject_reason[:title], :class => 'btn reject-button', 'data-reject-reason-id' => reject_reason[:id] %>
              </div>
            <% end %>
            <div class='reject-button-container'>
              <button type='button' class='btn reject-button'>Censor</button>
            </div>
          </div>
        </form>
      </div>
    <% end %>
  </div>
<% else %>
  <p>No videos to approve.</p>
  <p><%= link_to 'Look Again', nil %></p>
<% end %>

<%
@content_for_jquery = <<-JS
  "use strict";
  var VideoApp = window.VideoApp = {};
  // String video IDs.
  VideoApp.videoIds = #{ @videos.map {|v| v.id.to_s }.to_json.html_safe };

  var removeVideoId = function(id) {
    // Convert id to string.
    var index = VideoApp.videoIds.indexOf('' + id);
    if (index >= 0) {
      VideoApp.videoIds.splice(index, 1);
    }
  };

  var checkForMoreVideos = function() {
    // If we've run out, refresh the page.
    if (VideoApp.videoIds.length == 0) {
      window.location.reload(true);
    }
  };

  $('.videos').masonry({
    columnWidth: 390,
    gutter: 10,
    itemSelector: '.video'
  });

  var isValidForApprove = function(form) {
    valid = true;
    $('.radio-rating', form).each(function() {
      if ($('input:checked', this).val() == null) {
        // User didn't select a rating.
        alert("Please rate before approving.");
        valid = false;
        return false; // break.
      }
    });
    return valid;
  };

  // form is the form with data DOM element
  // action can be one of: "pass", "fail", "hold"
  var updateVideo = function(form, action) {
    var $form = $(form);

    if (action === 'pass' && ! isValidForApprove(form)) {
      return;
    }

    $form.find("input[name='video[action]']").val(action);
    videoId = $form.attr('data-video-id');
    if (! videoId) {
      throw new Error("I was trying to update a video, but I couldn't find its id");
    }

    $.ajax({
      type: 'POST',
      url: "/videos/update/" + videoId,
      dataType: 'json',
      data: $form.serialize()
    }).done(function() {
      // When the update succeeds, if we accepted or rejected, then deliver
      // video callbacks to the client application.
      if (action === 'pass' || action === 'fail') {
        $.ajax({
          type: 'POST',
          url: "/videos/deliver_callbacks",
          dataType: 'json'
        });
      }
    });
    var $video = $form.closest('.video');
    // TODO: Upgrade masonry and change reload to layout.
    $('.videos').masonry('remove', $video).masonry('reload');

    // Track the videos we have on the page.
    removeVideoId(videoId);

    checkForMoreVideos();
  };

  var rejectVideo = function(form, rejectReasonId) {
    var $form = $(form);
    // For censor, rejectReasonId will be null/undefined.
    $form.find("input[name='video[reject_reason_id]']").val(rejectReasonId);
    updateVideo(form, 'fail');
  };

  $(document).on('submit', '.video-approval-form', function(event) {
    event.preventDefault();
    updateVideo(this, 'pass');
  });

  $(document).on('click', '.hold-button', function(event) {
    event.preventDefault();
    updateVideo($(this).closest('.video-approval-form'), 'hold');
  });

  $(document).on('click', '.reject-button', function(event) {
    event.preventDefault();
    var rejectReasonId = $(this).attr('data-reject-reason-id');
    rejectVideo($(this).closest('.video-approval-form'), rejectReasonId);
  });
JS

%>